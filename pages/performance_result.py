import dash
from dash import dcc, html, callback
from dash.dependencies import Input, Output
import plotly.graph_objs as go
print("Dash version:", dash.__version__)
# Initialize the Dash app
dash.register_page(__name__, path='/survived', name="Result ðŸ“Š")


# Define available model options
models = {
    'RandomForest': {
        'f1_before': [1.0, 0.783, 0.63, 0.554, 0.511, 0.493, 0.486, 0.481, 0.477, 0.476, 0.475, 0.475, 0.474, 0.474, 0.474, 0.474],
        'accuracy_before': [1.0, 0.943, 0.918, 0.909, 0.904, 0.902, 0.902, 0.901, 0.901, 0.901, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9],
        'recall_before': [1.0, 0.713, 0.589, 0.542, 0.519, 0.509, 0.506, 0.503, 0.502, 0.501, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        'f1_after': [0.987, 0.999, 0.951, 0.885, 0.816, 0.755, 0.696, 0.652, 0.613, 0.581, 0.553, 0.536, 0.521, 0.512, 0.503, 0.497, 0.49, 0.487, 0.484, 0.482, 0.479, 0.478, 0.477, 0.477, 0.476, 0.476, 0.475,
                     0.475, 0.475, 0.475, 0.474, 0.474, 0.474, 0.474],
        'accuracy_after': [0.995, 1.0, 0.984, 0.965, 0.949, 0.937, 0.928, 0.921, 0.916, 0.912, 0.909, 0.907, 0.905, 0.904, 0.903, 0.903, 0.902, 0.902, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9],
        'recall_after': [0.997, 1.0, 0.918, 0.825, 0.746, 0.686, 0.637, 0.605, 0.578, 0.558, 0.542, 0.533, 0.524, 0.519, 0.515, 0.512, 0.508, 0.507, 0.505, 0.504, 0.503, 0.502, 0.502, 0.501, 0.501, 0.501, 0.501, 0.501, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
    },
    'NaiveBayes': {
        'f1_before': [0.979, 0.928, 0.809, 0.695, 0.61, 0.554, 0.519, 0.501, 0.49, 0.484, 0.48, 0.479, 0.477, 0.477, 0.476, 0.476, 0.475, 0.475, 0.475],
        'accuracy_before': [0.992, 0.976, 0.947, 0.927, 0.915, 0.909, 0.905, 0.903, 0.902, 0.901, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9],
        'recall_before': [0.902, 0.711, 0.564, 0.531, 0.515, 0.507, 0.503, 0.501, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
        'f1_after': [0.996, 0.991, 0.98, 0.97, 0.958, 0.945, 0.933, 0.923, 0.915, 0.909, 0.903, 0.899, 0.895, 0.891, 0.888, 0.886, 0.884, 0.882, 0.881, 0.88],
        'accuracy_after': [0.999, 0.999, 0.998, 0.997, 0.995, 0.993, 0.991, 0.99, 0.989, 0.989, 0.988, 0.987, 0.987, 0.987, 0.987, 0.986, 0.986, 0.986, 0.986, 0.986],
        'recall_after': [1.0, 0.992, 0.969, 0.957, 0.951, 0.945, 0.939, 0.935, 0.931, 0.927, 0.924, 0.921, 0.918, 0.915, 0.913, 0.911, 0.909, 0.908, 0.906, 0.905]
    },
    'SVM':{
        'f1_before':[0.989, 0.963, 0.896, 0.836, 0.787, 0.752, 0.724, 0.702, 0.685, 0.671, 0.657, 0.646, 0.637, 0.629, 0.622, 0.613, 0.606,
            0.6, 0.595, 0.59, 0.586, 0.582, 0.577, 0.574, 0.569, 0.566, 0.562, 0.557, 0.555, 0.552, 0.55, 0.547, 0.545, 0.542, 0.54, 0.538, 0.536, 0.533, 0.532, 0.53, 0.528, 0.526, 0.524, 0.523, 0.521, 0.519, 0.518, 0.516, 0.514, 0.513, 0.512], 
        'accuracy_before':[0.996, 0.987, 0.967, 0.953, 0.943, 0.937, 0.932, 0.928, 0.926, 0.924, 0.922, 0.92, 0.919, 0.918, 0.917, 0.916, 0.915, 0.914, 0.914, 0.913,
                  0.912, 0.912, 0.911, 0.911, 0.91, 0.91, 0.91, 0.909, 0.909, 0.909, 0.908, 0.908, 0.908, 0.907, 0.907, 0.907, 0.907, 0.906, 0.906, 0.906, 0.906, 0.906, 0.905, 0.905, 0.905, 0.905, 0.905, 0.905, 0.904, 0.904, 0.904],
        'recall_before':[0.997, 0.948, 0.846, 0.771, 0.719, 0.685, 0.661, 0.643, 0.629, 0.618, 0.609, 0.6, 0.594, 0.589, 0.584, 0.578, 0.574, 0.57, 0.567, 0.564, 0.561, 0.559, 0.556, 0.554, 0.551, 0.549,
                0.547, 0.544, 0.543, 0.541, 0.54, 0.538, 0.537, 0.536, 0.535, 0.534, 0.532, 0.531, 0.53, 0.529, 0.528, 0.527, 0.526, 0.525, 0.524, 0.523, 0.522, 0.521, 0.521, 0.52, 0.519], 
        
        'f1_after':[0.983, 0.986, 0.987, 0.984, 0.974, 0.961, 0.944, 0.924, 0.901, 0.879, 0.855, 0.833, 0.808, 0.787, 0.768, 0.75, 0.731, 0.715, 0.701, 0.686, 0.671, 0.658, 0.646, 0.637, 0.63,
            0.622, 0.613, 0.604, 0.596, 0.59, 0.584, 0.578, 0.573, 0.569, 0.564, 0.558, 0.553, 0.548, 0.544, 0.54, 0.536, 0.533, 0.529, 0.526, 0.522, 0.519, 0.516, 0.514, 0.512, 0.51, 0.508],
        'accuracy_after':[0.994, 0.995, 0.995, 0.994, 0.991, 0.987, 0.981, 0.975, 0.969, 0.963, 0.957, 0.952, 0.947, 0.943, 0.939, 0.936, 0.933, 0.93, 0.928, 0.926, 0.923, 0.922, 0.92,
                  0.919, 0.918, 0.917, 0.916, 0.915, 0.914, 0.913, 0.912, 0.911, 0.911, 0.91, 0.91, 0.909, 0.908, 0.908, 0.908, 0.907, 0.907, 0.906, 0.906, 0.906, 0.905, 0.905, 0.905, 0.904, 0.904, 0.904, 0.904],
        'recall_after': [0.996, 0.996, 0.996, 0.989, 0.971, 0.948, 0.919, 0.887, 0.854, 0.825, 0.795, 0.769, 0.741, 0.719, 0.701, 0.684, 0.667, 0.654, 0.642, 0.63, 0.619,
                0.609, 0.601, 0.594, 0.589, 0.584, 0.579, 0.573, 0.568, 0.564, 0.56, 0.557, 0.554, 0.551, 0.548, 0.545, 0.542, 0.539, 0.537, 0.534, 0.532, 0.53, 0.529, 0.527, 0.525, 0.523, 0.522, 0.52, 0.519, 0.518, 0.517], 
        
    },
    'Decisiontree':{
        'f1_before': [0.979, 0.804, 0.693, 0.629, 0.593, 0.567, 0.548, 0.535, 0.525, 0.516, 0.507, 0.5, 0.497, 0.493, 0.49, 0.488, 0.486, 0.484, 0.481, 0.48, 0.479, 0.479, 0.478,
            0.477, 0.476, 0.476, 0.476, 0.475, 0.475, 0.475, 0.475, 0.475, 0.474, 0.474, 0.474, 0.474, 0.474, 0.474, 0.474],
        'accuracy_before': [0.992, 0.944, 0.925, 0.916, 0.913, 0.91, 0.908, 0.907, 0.906, 0.905, 0.904, 0.903, 0.903, 0.902, 0.902, 0.902, 0.902, 0.901,
                  0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.901, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9],
        'recall_before' : [0.995, 0.744, 0.638, 0.59, 0.566, 0.55, 0.539, 0.532, 0.526, 0.521, 0.517, 0.513, 0.512, 0.51, 0.508, 0.507, 0.506, 0.505, 0.504,
                0.503, 0.503, 0.502, 0.502, 0.502, 0.501, 0.501, 0.501, 0.501, 0.501, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],


        'f1_after' : [0.991, 1.0, 0.96, 0.915, 0.874, 0.837, 0.804, 0.777, 0.752, 0.728, 0.71, 0.692, 0.678, 0.66, 0.646, 0.636, 0.626, 0.617, 0.609, 0.602,
            0.595, 0.588, 0.581, 0.576, 0.571, 0.567, 0.563, 0.559, 0.556, 0.551, 0.546, 0.544, 0.541, 0.539, 0.537, 0.535, 0.533, 0.53, 0.529, 0.527, 0.525, 0.524, 0.523, 0.522, 0.521, 0.52, 0.519, 0.518, 0.517, 0.516, 0.515],
        'accuracy_after': [0.997, 1.0, 0.986, 0.973, 0.962, 0.954, 0.947, 0.942, 0.937, 0.933, 0.93, 0.927, 0.925, 0.922, 0.92, 0.919, 0.918, 0.916,
                  0.915, 0.915, 0.914, 0.913, 0.912, 0.911, 0.911, 0.91, 0.91, 0.909, 0.909, 0.908, 0.908, 0.908, 0.907, 0.907, 0.907, 0.907, 0.906, 0.906, 0.906, 0.906, 0.906, 0.906, 0.905, 0.905, 0.905, 0.905, 0.905, 0.905, 0.905, 0.905, 0.905],
        'recall_after' :  [0.998, 1.0, 0.932, 0.865, 0.812, 0.768, 0.734, 0.707, 0.684, 0.663, 0.648, 0.634, 0.623, 0.611, 0.6, 0.594, 0.587, 0.581, 0.575,
                0.571, 0.567, 0.563, 0.558, 0.555, 0.552, 0.55, 0.548, 0.545, 0.543, 0.541, 0.538, 0.537, 0.535, 0.534, 0.533, 0.532, 0.531, 0.529, 0.529, 0.527, 0.526, 0.526, 0.525, 0.525, 0.524, 0.524, 0.523, 0.522, 0.522, 0.521, 0.521],
    },
    'XGBoost':{
        'f1_before' : [0.999, 0.896, 0.758, 0.636, 0.559, 0.517, 0.496, 0.485, 0.48, 0.477, 0.475, 0.475, 0.474, 0.474, 0.474],
        'accuracy_before' : [1.0, 0.968, 0.938, 0.919, 0.909, 0.905, 0.903, 0.901, 0.901, 0.901, 0.9, 0.9, 0.9, 0.9, 0.9],
        'recall_before' : [1.0, 0.84, 0.689, 0.594, 0.545, 0.522, 0.511, 0.506, 0.503, 0.502, 0.501, 0.5, 0.5, 0.5, 0.5],


        'f1_after' : [0.986, 0.999, 0.989, 0.969, 0.945, 0.923, 0.899, 0.875, 0.848, 0.822, 0.797, 0.773, 0.75, 0.73, 0.708, 0.689, 0.672, 0.658,
            0.644, 0.63, 0.617, 0.608, 0.595, 0.586, 0.578, 0.57, 0.562, 0.556, 0.549, 0.544, 0.538, 0.533, 0.529, 0.526, 0.523, 0.52, 0.517, 0.514, 0.511, 0.509, 0.506, 0.504, 0.502, 0.501, 0.499, 0.498, 0.497, 0.495, 0.494, 0.493, 0.492],
        'accuracy_after' : [0.995, 1.0, 0.996, 0.989, 0.982, 0.975, 0.969, 0.963, 0.956, 0.951, 0.945, 0.941, 0.937, 0.933, 0.93, 0.927, 0.924, 0.922, 0.92, 0.918, 0.916, 0.915, 0.914, 0.913, 0.912,
                  0.911, 0.91, 0.909, 0.908, 0.908, 0.907, 0.906, 0.906, 0.906, 0.905, 0.905, 0.905, 0.904, 0.904, 0.904, 0.904, 0.903, 0.903, 0.903, 0.903, 0.903, 0.903, 0.903, 0.902, 0.902, 0.902],
        'recall_after' : [0.997, 1.0, 0.981, 0.946, 0.909, 0.876, 0.843, 0.813, 0.782, 0.753, 0.726, 0.704, 0.682, 0.665, 0.647, 0.632, 0.619, 0.609, 0.599, 0.59, 0.581, 0.575, 0.567, 0.561, 0.556, 0.552, 0.547,
                0.543, 0.54, 0.537, 0.533, 0.531, 0.528, 0.527, 0.525, 0.524, 0.522, 0.52, 0.519, 0.518, 0.516, 0.515, 0.514]
        
    },

    'LightGBM':{
        'f1_before' : [1.0, 0.828, 0.676, 0.582, 0.528, 0.5, 0.486, 0.48, 0.477, 0.476, 0.475, 0.474, 0.474],
        'accuracy_before' : [1.0, 0.952, 0.925, 0.912, 0.906, 0.903, 0.902, 0.901, 0.901, 0.901, 0.9, 0.9, 0.9],
        'recall_before' : [1.0, 0.759, 0.622, 0.559, 0.528, 0.513, 0.506, 0.503, 0.502, 0.501, 0.5, 0.5, 0.5],


        'f1_after' : [0.986, 0.995, 0.982, 0.963, 0.946, 0.929, 0.916, 0.902, 0.89, 0.881, 0.871, 0.862, 0.854, 0.845, 0.838, 0.83, 0.825, 0.819, 0.813, 0.808, 0.803, 0.799, 0.794, 0.79, 0.785, 0.78,
            0.776, 0.771, 0.767, 0.763, 0.759, 0.756, 0.751, 0.747, 0.743, 0.74, 0.737, 0.733, 0.73, 0.727, 0.723, 0.721, 0.718, 0.714, 0.711, 0.708, 0.706, 0.703, 0.701, 0.697, 0.695],
        'accuracy_after' : [0.995, 0.998, 0.994, 0.987, 0.982, 0.977, 0.973, 0.97, 0.967, 0.964, 0.962, 0.96, 0.958, 0.956, 0.954, 0.952, 0.951, 0.95, 0.949, 0.948, 0.947, 0.946, 0.945, 0.944, 0.943, 0.942,
                  0.941, 0.94, 0.94, 0.939, 0.938, 0.938, 0.937, 0.936, 0.935, 0.935, 0.934, 0.934, 0.933, 0.933, 0.932, 0.932, 0.931, 0.931, 0.93, 0.93, 0.929, 0.929, 0.928, 0.928, 0.927],
        'recall_after' : [0.997, 0.999, 0.971, 0.938, 0.91, 0.886, 0.866, 0.848, 0.833, 0.821, 0.808, 0.797, 0.788, 0.778, 0.77, 0.761, 0.755, 0.749, 0.743, 0.738, 0.733, 0.728, 0.723, 0.719, 0.714, 0.71, 0.706, 0.701,
                0.697, 0.694, 0.69, 0.687, 0.683, 0.68, 0.676, 0.673, 0.671, 0.668, 0.665, 0.662, 0.659, 0.657, 0.654, 0.652, 0.649, 0.647, 0.645, 0.643, 0.641, 0.638, 0.636]
    
    }, 
    'Logistic Regression':{
        'f1_before' : [0.948, 0.918, 0.885, 0.856, 0.831, 0.81, 0.793, 0.776, 0.763, 0.752, 0.742, 0.733, 0.724, 0.716, 0.708, 0.701, 0.693, 0.689, 0.684, 0.678, 0.673, 0.667, 0.664, 0.659, 0.655,
            0.65, 0.647, 0.644, 0.641, 0.638, 0.635, 0.632, 0.629, 0.627, 0.624, 0.623, 0.621, 0.618, 0.616, 0.613, 0.612, 0.609, 0.607, 0.605, 0.603, 0.6, 0.599, 0.597, 0.596, 0.593, 0.592],
        'accuracy_before' : [0.98, 0.971, 0.962, 0.955, 0.95, 0.945, 0.942, 0.939, 0.937, 0.935, 0.933, 0.932, 0.931, 0.929, 0.928, 0.927, 0.926, 0.925, 0.924, 0.924, 0.923, 0.922, 0.922, 0.921,
                  0.921, 0.92, 0.919, 0.919, 0.919, 0.918, 0.918, 0.918, 0.917, 0.917, 0.917, 0.916, 0.916, 0.916, 0.916, 0.915, 0.915, 0.915, 0.915, 0.914, 0.914, 0.914, 0.914, 0.913, 0.913, 0.913, 0.913],
        'recall_before' : [0.985, 0.911, 0.852, 0.809, 0.776, 0.75, 0.731, 0.713, 0.7, 0.689, 0.679, 0.671, 0.663, 0.656, 0.649, 0.643, 0.637, 0.633, 0.629, 0.625, 0.621, 0.617, 0.614, 0.611,
                0.607, 0.604, 0.602, 0.6, 0.597, 0.595, 0.594, 0.591, 0.589, 0.588, 0.586, 0.585, 0.584, 0.582, 0.58, 0.579, 0.578, 0.576, 0.575, 0.574, 0.572, 0.57, 0.57, 0.568, 0.568, 0.566, 0.565],

        'f1_after' : [0.971, 0.978, 0.981, 0.98, 0.977, 0.971, 0.963, 0.956, 0.947, 0.939, 0.931, 0.922, 0.914, 0.906, 0.899, 0.892, 0.884, 0.877, 0.87, 0.864, 0.858, 0.852, 0.847, 0.841, 0.834, 0.828, 0.823, 0.819,
            0.814, 0.809, 0.804, 0.8, 0.795, 0.791, 0.787, 0.783, 0.778, 0.773, 0.769, 0.765, 0.762, 0.757, 0.752, 0.748, 0.744, 0.74, 0.736, 0.733, 0.729, 0.726, 0.722],
        'accuracy_after' : [0.989, 0.992, 0.993, 0.993, 0.992, 0.99, 0.987, 0.985, 0.982, 0.98, 0.978, 0.975, 0.973, 0.971, 0.969, 0.967, 0.965, 0.963, 0.961, 0.96, 0.959, 0.957, 0.956, 0.955, 0.953, 0.952,
                  0.951, 0.95, 0.949, 0.948, 0.947, 0.946, 0.945, 0.944, 0.944, 0.943, 0.942, 0.941, 0.94, 0.939, 0.939, 0.938, 0.937, 0.936, 0.936, 0.935, 0.934, 0.934, 0.933, 0.932, 0.932],
        'recall_after' : [0.991, 0.991, 0.989, 0.981, 0.971, 0.958, 0.944, 0.93, 0.916, 0.902, 0.891, 0.877, 0.866, 0.854, 0.845, 0.835, 0.825, 0.816, 0.807, 0.8, 0.793, 0.786, 0.78, 0.773, 0.765, 0.759,
                0.754, 0.749, 0.743, 0.738, 0.733, 0.73, 0.725, 0.72, 0.717, 0.713, 0.708, 0.703, 0.699, 0.696, 0.693, 0.688, 0.684, 0.681, 0.677, 0.673, 0.67, 0.667, 0.664, 0.661, 0.658]
    }

}


# Define the Dash layout
layout = html.Div([
    html.Br(),
    html.H2("ðŸ“ˆ Before & After Adversarial Training"),
    html.Div([
        dcc.Dropdown(
            id='model-dropdown',
            options=[{'label': model, 'value': model} for model in models.keys()],
            value='RandomForest'
        ),
        dcc.Dropdown(
            id='score-dropdown',
            options=[
                {'label': 'F1 Score', 'value': 'f1'},
                {'label': 'Accuracy', 'value': 'accuracy'},
                {'label': 'Recall', 'value': 'recall'}
            ],
            value='f1'
        )
    ]),
    dcc.Graph(id='metric-graph')
])

# Define callback to update graph based on dropdown selection
@callback(
    Output('metric-graph', 'figure'),
    [Input('model-dropdown', 'value'),
     Input('score-dropdown', 'value')]
)
def update_graph(selected_model, selected_score):
    model_data = models[selected_model]

    if selected_score == 'f1':
        y_before = model_data['f1_before']
        y_after = model_data['f1_after']
        title = f'{selected_model} - F1 Score'
    elif selected_score == 'accuracy':
        y_before = model_data['accuracy_before']
        y_after = model_data['accuracy_after']
        title = f'{selected_model} - Accuracy'
    elif selected_score == 'recall':
        y_before = model_data['recall_before']
        y_after = model_data['recall_after']
        title = f'{selected_model} - Recall'

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=list(range(1, len(y_before) + 1)), y=y_before, mode='lines', name='Before'))
    fig.add_trace(go.Scatter(x=list(range(1, len(y_after) + 1)), y=y_after, mode='lines', name='After'))
    fig.update_layout(title=title, xaxis_title='Iterations', yaxis_title=selected_score.capitalize())

    return fig